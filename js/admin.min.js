/* globals jQuery, alert, wp, _, Backbone, tinymce, inlineEditPost, inlineEditTax, nlingualL10n */
!function(){var g=window.nLingual={},n=g.Framework={},r=n.Language=Backbone.Model.extend({defaults:{system_name:"",native_name:"",short_name:"",iso_code:"",slug:"",locale_name:"",direction:"",active:!0}}),a=n.LanguageSet=Backbone.Collection.extend({model:r}),e=n.LocalizableField=Backbone.Model.extend({idAttribute:"field",defaults:{field_id:"",values:"",nonce:""}}),t=n.LocalizableFieldSet=Backbone.Collection.extend({model:e}),u=g.Languages=new a,i=g.LocalizableFields=new t;
// =========================
// ! Backbone Stuff
// =========================
// =========================
// ! jQuery Stuff
// =========================
jQuery(function(s){var c,n,d,a;
// =========================
// ! Setings Pages
// =========================
// Check all fields of a matching name
// =========================
// ! - TinyMCE Extensions
// =========================
if(s(".nl-checkall").change(function(){var n=s(this).data("name");s('input[name="'+n+'[]"]').attr("checked",this.checked)}),s(".nl-matchall").change(function(){var n=s(this).data("name");s('[name="'+n+'"]').val(this.checked?"*":"")}),
// Hide all sections by default
s(".nl-section-content").hide(),
// Add toggle feature for sections
s(".nl-section-toggle").each(function(){s(this).data("text",s(this).text())}).click(function(){var n,a,e;(a=(n=s(this)).parent()).toggleClass("open"),e=a.hasClass("open"),a.find(".nl-section-content").animate({height:"toggle"}),n.text(n.data(e?"alt":"text"))}),
// Handle rendering of the previews
s(".nl-preview").on("nl:render",function(){var n,a,e,t,l,i;
// Get the default language slug, defaulting to "en"
n=s("#nlingual_default_language").val(),(n=u.get(n))&&(a=n.get("slug")||"en"),
// Get the query var, defaulting to "nl_language"
e=s("#nlingual_query_var").val()||"nl_language",
// Get the skip and override options
t=s("#nlingual_skip_default_l10n").attr("checked"),l=s("#nlingual_post_language_override").attr("checked"),
// Get the format; some previews are dependent on options
i=s(this).hasClass("nl-url-preview")?s(this).data(t?"excluded":"included"):s(this).hasClass("nl-override-preview")?s(this).data(l?"on":"off"):s(this).data("format"),
// Update the preview
s(this).text(i.replace(/%l/g,a).replace(/%v/g,e))}).trigger("nl:render"),
// Changing any of these will trigger re-rendering of the previews
s("#nlingual_default_language").change(function(){s(".nl-preview").trigger("nl:render")}),s("#nlingual_skip_default_l10n").change(function(){s(".nl-preview").trigger("nl:render")}),s("#nlingual_post_language_override").change(function(){s(".nl-preview").trigger("nl:render")}),s("#nlingual_query_var").on("keyup change",function(){s(".nl-preview").trigger("nl:render")}),
// Default to GET version of previews
s(".nl-preview").hide().filter(".nl-redirect-get").show(),
// Changing the method will change which previews are shown
s('input[name="nlingual_options[url_rewrite_method]"]').change(function(){var n=s(this).val();
// Ignore if it's not checked or somehow has no value
this.checked&&n&&
// Show the associated preview while hiding the others
s(".nl-preview").hide().filter(".nl-redirect-"+n).show()}).change(),
// =========================
// ! Language Manager
// =========================
s("#nlingual_languages").each(function(){
// Row builder utility
function e(n){var a,e,t,l;
// Loop through properties and replace
for(l in a=(a=d).replace(/%id%/g,n.id),n.attributes)t=new RegExp("%"+l+"%","g"),a=a.replace(t,n.get(l));
// Parse the row into a new element
// Check correct direction checkbox
(e=s(a)).find('.nl-language-direction input[value="'+n.get("direction")+'"]').attr("checked",!0),
// Check active checkbox if true
e.find(".nl-language-active input").attr("checked",n.get("active")),
// Add the row to the table
i.append(e).sortable("refresh")}
// Load table with current languages
var n,t,i,a,d,l,o;
// Elements
// Load preset selector
for(o in n=s(this),t=s("#nl_language_preset"),i=s("#nl_language_list"),a=s("#nl_language_add"),d=s("#nl_language_row").text(),l=-1,
// Setup sortability
i.sortable({items:"tr",containment:"parent",handle:".handle"}),g.presets)t.append('<option value="'+o+'">'+g.presets[o].system_name+"</option>");u.each(e),
// Add button functionality
a.click(function(){var n,a;
// Check if preset was selected,
// otherwise make blank language
t.val()?(a=t.val(),(n=new r(g.presets[a])).set("iso_code",a),
// Reset preset selector
t.val(null)):n=new r,
// Default values
n.id=l,n.set("slug",n.get("iso_code")),n.set("active",!0),e(n),l--}),
// Delete button functionality
n.on("change",".nl-language-delete input",function(){var n=s(this).parents("tr").first();// Get the parent row
// Toggle delete class and inputs
n.toggleClass("todelete",this.checked),n.find("input").not(this).attr("disabled",this.checked)}),
// Auto-fill locale_name, iso_code and slug
n.on("change",".nl-language-system_name input",function(){var n,a,e,t,l;n=s(this).parents("tr").first(),// Get the parent row
// Get the text
a=s(this).val(),
// Get the other fields
e=n.find(".nl-language-locale_name input"),t=n.find(".nl-language-iso_code input"),l=n.find(".nl-language-slug input"),
// No ISO? Assume first 2 characters of system name
t.val()||t.val(a.substr(0,2).toLowerCase()),
// No locale? Assume same as ISO code
e.val()||e.val(t.val()),
// No slug? Assume same as ISO code
l.val()||l.val(t.val())})}),
// =========================
// ! Input Localizer
// =========================
// Setup the base localizer
c=s('<div class="nl-localizer"></div>').html(function(){var a='<div class="nl-localizer-toggle" title="'+nlingualL10n.LocalizeThis+'"></div>';return u.each(function(n){a+='<div class="nl-localizer-option" title="'+nlingualL10n.LocalizeFor.replace("%s",n.get("system_name"))+'" data-nl_language="'+n.id+'"><div class="nl-option-text" data-slug="'+n.get("slug")+'">'+n.get("system_name")+"</div></div>"}),a}),
// Flag for skipping redundant localizer update
n="nlLocalizerSkipUpdate",i.each(function(n){var a,t,e,l,i,d,o,r;a=n.get("field_id"),t=n.get("values"),e=n.get("nonce"),l=!1,0!==(
// Get the field if it exists and is an input/textarea
i=s("#"+a)).length&&i.is("input, textarea")&&(i.addClass("nl-localizable-input"),
// Check if it's a tinymce editor field
// Use the editor wrapper as the container
d=i.hasClass("wp-editor-area")?i.parents(".wp-editor-wrap"):(
// Wrap the field in a container
i.wrap('<div class="nl-localizable"></div>'),i.parent()),
// Create the control
o=c.clone(),
// Store the control reference in the field
i.data("$nl_localizer",o),
// Store the current language of the control
o.data("nl_current_language",g.default_language),
// Store the field and wrapper reference in the control
o.data("$nl_localizer_field",i),(
// Create the storage input for the unlocalized field
r=s('<input type="hidden" />')).attr("name",i.attr("name")),r.val(i.val()),
// Add to the wrapper
r.appendTo(d),
// Store the unlocalized input reference in the control
o.data("$nl_localized_"+g.default_language,r),
// Add hidden storage inputs
u.each(function(n){var a,e;
// Skip the default language
g.default_language!==n.id&&(
// Get the localized version of the value
a=t[n.id]||null,(
// Create a hidden field for the input
e=s('<input type="hidden" />')).attr("name","nlingual_localized["+i.attr("name")+"]["+n.id+"]"),e.val(a),
// Store it for later use
o.data("$nl_localized_"+n.id,e),
// Add to the wrapper
e.appendTo(d),""!==a&&null!==a&&(l=!0))}),
// Add the current class to the default language if localized versions are set
l&&o.find('[data-nl_language="'+g.default_language+'"]').addClass("nl-current"),
// Add the nonce field
d.append('<input type="hidden" name="_nl_l10n_nonce['+n.id+']" value="'+e+'" />'),
// Add the control at the end
o.appendTo(d))}),s("body").on("click",".nl-localizer-option",function(){var n,a,e,t,l,i,d;
// Get the localizer control, and the selected language
a=(n=s(this)).parent(),l=n.data("nl_language"),
// Mark this as the new current one
s(this).addClass("nl-current").siblings().removeClass("nl-current"),
// Default language if nothing selected
l||(l=g.default_language),
// Get the current field and the localized storage field
e=a.data("$nl_localizer_field"),t=a.data("$nl_localized_"+l),
// Before we begin changing stuff, trigger an update on the field
e.trigger("nl:localizer:update"),
// Update the controls current language
a.data("nl_current_language",l),
// Get the value/name of the target localized field
i=t.val(),d=t.attr("name"),
// Swap the field's value/name
e.val(i).attr("name",d),
// Trigger a change event, for potential extensibility
e.trigger("nl:localizer:change")}),s("body").on("input nl:localizer:update nl:localizer:save",".nl-localizable-input",function(){var n,a,e;
// Get the control reference and it's current language
e=(n=s(this).data("$nl_localizer")).data("nl_current_language"),
// Update it with the current value
(
// Get the localized storage field
a=n.data("$nl_localized_"+e)).val(this.value)}),"object"==typeof tinymce){tinymce.on("SetupEditor",function(n){
// TinyMCE 4.7 changes callback arg to event CONTAINING editor
var a=n.editor||n,e=s(a.getElement()),t=e.data("$nl_localizer");t&&(a.on("init",function(){s(a.getContainer()).parent().after(t)}),e.on("nl:localizer:update",function(){
// Get the content, clean it
var n=a.getContent();n=wp.editor.removep(n),e.val(n)}),e.on("nl:localizer:change",function(){
// Get the value, process it
var n=e.val();n=wp.editor.autop(n),a.setContent(n)}))});var e=tinymce.Editor.prototype.save;tinymce.Editor.prototype.save=function(){e.apply(this,arguments),this.fire("SavedContent"),s(this.getElement()).trigger("nl:localizer:save")}}
// =========================
// ! - WP Media Extension
// =========================
if(wp&&wp.media&&wp.media.view){var l=wp.media.view.Attachment.Details.prototype.render;wp.media.view.Attachment.Details.prototype.render=function(){var n,d,a,e,o,t;return n=l.apply(this,arguments),void 0===(d=this.model.get("localized_values"))||(a=s('<label class="setting nl-localizer-languages"></label>').html(function(){var e='<span class="name">'+nlinualL10n.Translate+"</span>";return e+='<span class="value">',u.each(function(n,a){0<a&&(e+=" | "),e+='<a href="#" class="nl-localizer-language" data-nl_language="'+n.id+'">'+n.get("system_name")+"</a>"}),e+="</span>"}),e=a.find(".nl-localizer-language"),o=this,_.each(["title","caption","alt","description"],function(t){var l,i;(l=i=o.$('.setting[data-setting="'+t+'"]')).addClass("nl-localizer-field"),u.each(function(n){var a,e;if(n.id===g.default_language)return!0;a="localized_"+n.id+"_"+t,(e=l.clone()).addClass("nl-language-"+n.id),e.data("setting",a).attr("data-setting",a),e.find("input,textarea").val(d[t][n.id]),i.after(e),i=e}),l.addClass("nl-language-"+g.default_language)}),t=this.$(".nl-localizer-field"),e.on("click",function(){var n;e.removeClass("nl-current"),s(this).addClass("nl-current"),n=s(this).data("nl_language"),t.hide().filter(".nl-language-"+n).show()}),e.filter('[data-nl_language="'+g.default_language+'"]').trigger("click"),
// Attach to proper area...
wp.media.view.Attachment.Details.TwoColumn&&this instanceof wp.media.view.Attachment.Details.TwoColumn?
// Inside the settings wrapper if the Two Column interface from Media Grid
this.$(".settings").prepend(a):
// Just after the attachment info block if the default interface on the Post Screen
this.$(".attachment-info").after(a)),n}}
// =========================
// ! Meta Box and Quick/Bulk Edit
// =========================
// Update visible translation fields based on current language
s(".nl-language-input").change(function(){var n,a;n=s(this).val(),
// Toggle visibility of the translations interface if language isn't set
(a=s(this).parents(".nl-translation-manager")).find(".nl-manage-translations").toggleClass("hidden","0"===n),
// Show all translation fields by default
a.find(".nl-translation-field").show(),
// Hide the one for the current language
a.find(".nl-translation-"+n).hide()}).change(),// Update on page load
// Show/Hide the Add/Edit buttons based on value
s(".nl-translation-field").each(function(){var n=s(this).find(".nl-input").val(),a=s(this).find(".nl-add-translation"),e=s(this).find(".nl-edit-translation");e.hide(),parseInt(n)&&(a.hide(),e.show())}),
// Create a new translation for the assocaited language
s(".nl-add-translation").click(function(){var n,e,t,l,a,i,d,o;n=s(this).parents(".nl-field"),e=n.find(".nl-input"),t=n.find(".nl-add-translation"),l=n.find(".nl-edit-translation"),a=s("#post_ID").val(),i=s("#nl_language").val(),d=e.parents(".nl-field").data("nl_language"),window.open("/wp-admin/admin-post.php?"+s.param({action:"nl_new_translation",post_id:a,post_language_id:i,translation_language_id:d}),"_blank").onload=function(){var n,a=this.location.href.match(/post=(\d+)/)[1];e.val(a),t.hide(),l.show().attr("title")}}),
// Open the editor for the selected translation
s(".nl-edit-translation").click(function(){var n,a,e;
// Get the parent field
// Throw error if target isn't a valid post
"new"===(
// Get the selected value
a=(n=s(this).parents(".nl-field")).find(".nl-input").val())||parseInt(a)<=0?alert(nlingualL10n.NoPostSelected):(
// Build the edit URL and open in a new tab
e=s(this).data("url").replace("%d",a),window.open(e))}),
// =========================
// ! WP API Extensions
// =========================
// Extend inlineEditPost if available
"object"==typeof inlineEditPost&&(d=inlineEditPost.edit,
// Replace with new function
inlineEditPost.edit=function(n){var a,e,t,l,i;
// Start by calling the original for default behaviour
d.apply(this,arguments),
// Get the post ID
a=0,"object"==typeof n&&(a=parseInt(this.getId(n))),
// Get the post and edit rows
e=s("#post-"+a),t=s("#edit-"+a),
// Update the nonce field
l=e.find(".nl-nonce").val(),t.find(".nl-nonce").val(l),
// Update the language field
i=e.find(".nl-language").val(),t.find(".nl-language-input").val(i).change(),
// Update the translations fields
t.find(".nl-translation-field").each(function(){var n,a;n=s(this).data("nl_language"),a=e.find(".nl-translation-"+n).val(),s(this).find("select").val(a||0)})}),
// Extend inlineEditTax if available
"object"==typeof inlineEditTax&&(a=inlineEditTax.edit,
// Replace with new function
inlineEditTax.edit=function(){
// Start by calling the original for default behaviour
a.apply(this,arguments)})})}();
//# sourceMappingURL=admin.min.js.map