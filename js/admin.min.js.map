{"version":3,"sources":["admin.js"],"names":["nL","Framework","Language","LanguageSet","LocalizableField","LocalizableFieldSet","Languages","LocalizableFields","window","nLingual","Backbone","Model","extend","defaults","system_name","native_name","short_name","iso_code","slug","locale_name","direction","active","Collection","model","idAttribute","field_id","values","nonce","jQuery","$","change","name","this","data","concat","attr","checked","val","hide","each","text","click","$toggle","$section","parent","toggleClass","open","hasClass","find","animate","height","on","format","language","get","qconst","skip","is","override","replace","trigger","filter","show","method","$manager","$preset","$list","$addBtn","languageRowTemplate","languageRowIndex","preset","sortable","items","containment","handle","presets","append","buildLangRow","row","id","prop","attributes","regex","RegExp","$row","set","parents","first","not","systemName","$localeName","$isoCode","$slug","substr","toLowerCase","$localizerTemplate","html","nlingualL10n","LocalizeThis","title","LocalizeFor","field","fieldId","$field","length","$wrap","addClass","wrap","$control","clone","default_language","$unlocalized","appendTo","hasLocalized","localized","$localized","$option","siblings","removeClass","value","wpEditor","wp","oldEditor","editor","tinymce","_typeof","event","getElement","getContainer","after","content","removep","getContent","autop","setContent","oldEditorSave","Editor","prototype","save","apply","arguments","fire","$parent","$input","$select","postId","postLanguageId","translationLanguageId","admin_post","param","action","post_id","post_language_id","translation_language_id","onload","_slicedToArray","location","href","match","target","parseInt","alert","NoPostSelected","url","confirm","RemoveTranslationConfirm","$title","languageId","ajax","ajaxurl","type","language_id","success","NoTranslation","error","RemoveTranslationError","inlineEditPost","oldInlineEditPostEdit","edit","post","getId","$postRow","$editRow","postLanguage","translation"],"mappings":"qsCACA,IACOA,EAMAC,EAGAC,EAcAC,EAKAC,EAUAC,EAQAC,EACAC,EA/CAP,EAAKQ,OAAOC,SAAW,GAMvBR,EAAYD,EAAGC,UAAY,GAG3BC,EAAWD,EAAUC,SAAWQ,SAASC,MAAMC,OAAQ,CAC5DC,SAAU,CACTC,YAAc,GACdC,YAAc,GACdC,WAAc,GACdC,SAAc,GACdC,KAAc,GACdC,YAAc,GACdC,UAAc,GACdC,QAAc,KAKVlB,EAAcF,EAAUE,YAAcO,SAASY,WAAWV,OAAQ,CACvEW,MAAOrB,IAIFE,EAAmBH,EAAUG,iBAAmBM,SAASC,MAAMC,OAAQ,CAC5EY,YAAc,QACdX,SAAc,CACbY,SAAW,GACXC,OAAW,GACXC,MAAW,MAKPtB,EAAsBJ,EAAUI,oBAAsBK,SAASY,WAAWV,OAAQ,CACvFW,MAAOnB,IAOFE,EAAYN,EAAGM,UAAY,IAAIH,EAC/BI,EAAoBP,EAAGO,kBAAoB,IAAIF,EAMrDuB,QAAQ,SAAEC,GAMTA,EAAG,gBAAiBC,QAAQ,WAC3B,IAAMC,EAAOF,EAAGG,MAAOC,KAAM,QAC7BJ,EAAC,eAAAK,OAAkBH,EAAlB,SAAgCI,KAAM,UAAWH,KAAKI,YAExDP,EAAG,gBAAiBC,QAAQ,WAC3B,IAAMC,EAAOF,EAAGG,MAAOC,KAAM,QAC7BJ,EAAC,UAAAK,OAAaH,EAAb,OAAyBM,IAAKL,KAAKI,QAAU,IAAM,OAIrDP,EAAG,uBAAwBS,OAG3BT,EAAG,sBAAuBU,MAAM,WAC/BV,EAAGG,MAAOC,KAAM,OAAQJ,EAAGG,MAAOQ,WAC/BC,OAAO,WACV,IAAMC,EAAWb,EAAGG,MACdW,EAAWD,EAAQE,SAEzBD,EAASE,YAAa,QACtB,IAAMC,EAAOH,EAASI,SAAU,QAEhCJ,EAASK,KAAM,uBAAwBC,QAAS,CAAEC,OAAQ,WAE1DR,EAAQF,KAAME,EAAQT,KAAMa,EAAO,MAAQ,YAI5CjB,EAAG,eAAgBsB,GAAI,aAAa,WAEnC,IAYIC,EAZEC,EAAW/C,EAAUgD,IAAKzB,EAAG,8BAA+BQ,OAE5DnB,EAASmC,GAAYA,EAASC,IAAK,SAAc,KAGjDC,EAAS1B,EAAG,uBAAwBQ,OAAS,cAG7CmB,EAAO3B,EAAG,+BAAgC4B,GAAI,YAC9CC,EAAW7B,EAAG,oCAAqC4B,GAAI,YAK5DL,EADIvB,EAAGG,MAAOe,SAAU,kBACflB,EAAGG,MAAOC,KAAMuB,EAAO,WAAa,YAClC3B,EAAGG,MAAOe,SAAU,uBACtBlB,EAAGG,MAAOC,KAAMyB,EAAW,KAAO,OAElC7B,EAAGG,MAAOC,KAAM,UAI1BJ,EAAGG,MAAOQ,KAAMY,EAAOO,QAAS,MAAOzC,GAAOyC,QAAS,MAAOJ,OAC3DK,QAAS,aAGb/B,EAAG,8BAA+BC,QAAQ,WACzCD,EAAG,eAAgB+B,QAAS,gBAE7B/B,EAAG,+BAAgCC,QAAQ,WAC1CD,EAAG,eAAgB+B,QAAS,gBAE7B/B,EAAG,oCAAqCC,QAAQ,WAC/CD,EAAG,eAAgB+B,QAAS,gBAE7B/B,EAAG,uBAAwBsB,GAAI,gBAAgB,WAC9CtB,EAAG,eAAgB+B,QAAS,gBAI7B/B,EAAG,eAAgBS,OAAOuB,OAAQ,oBAAqBC,OAGvDjC,EAAG,sDAAuDC,QAAQ,WACjE,IAAMiC,EAASlC,EAAGG,MAAOK,MAGlBL,KAAKI,SAAa2B,GAKzBlC,EAAG,eAAgBS,OAAOuB,OAA1B,gBAAA3B,OAAmD6B,IAAYD,UAC5DhC,SAMJD,EAAG,uBAAwBU,MAAM,WAEhC,IAAMyB,EAAWnC,EAAGG,MACdiC,EAAWpC,EAAG,uBACdqC,EAAWrC,EAAG,qBACdsC,EAAWtC,EAAG,oBAEduC,EAAsBvC,EAAG,oBAAqBW,OAChD6B,GAAoB,EAUxB,IAAM,IAAMC,KAPZJ,EAAMK,SAAU,CACfC,MAAc,KACdC,YAAc,SACdC,OAAc,YAIO1E,EAAG2E,QACxBV,EAAQW,OAAR,kBAAA1C,OAAmCoC,EAAnC,MAAApC,OAAgDlC,EAAG2E,QAASL,GAASxD,YAArE,cAID,SAAS+D,EAAcxB,GACtB,IAAIyB,EAAMV,EAAoBT,QAAS,QAASN,EAAS0B,IAGzD,IAAM,IAAMC,KAAQ3B,EAAS4B,WAAa,CACzC,IAAMC,EAAQ,IAAIC,OAAQ,IAAMH,EAAO,IAAK,KAC5CF,EAAMA,EAAInB,QAASuB,EAAO7B,EAASC,IAAK0B,IAIzC,IAAMI,EAAOvD,EAAGiD,GAGhBM,EAAKpC,KAAL,uCAAAd,OAAmDmB,EAASC,IAAK,aAAjE,OAAsFnB,KAAM,WAAW,GAGvGiD,EAAKpC,KAAM,6BAA8Bb,KAAM,UAAWkB,EAASC,IAAK,WAGxEY,EAAMU,OAAQQ,GAAOb,SAAU,WAIhCjE,EAAUiC,KAAMsC,GAGhBV,EAAQ1B,OAAO,WACd,IAAIY,EAIJ,GAAKY,EAAQ5B,MAAQ,CACpB,IAAMiC,EAASL,EAAQ5B,OACvBgB,EAAW,IAAInD,EAAUF,EAAG2E,QAASL,KAC5Be,IAAK,WAAYf,GAG1BL,EAAQ5B,IAAK,WAEbgB,EAAW,IAAInD,EAIhBmD,EAAS0B,GAAKV,EACdhB,EAASgC,IAAK,OAAQhC,EAASC,IAAK,aACpCD,EAASgC,IAAK,UAAU,GAExBR,EAAcxB,GAEdgB,OAIDL,EAASb,GAAI,SAAU,6BAA6B,WACnD,IAAMiC,EAAOvD,EAAGG,MAAOsD,QAAS,MAAOC,QAGvCH,EAAKvC,YAAa,WAAYb,KAAKI,SACnCgD,EAAKpC,KAAM,SAAUwC,IAAKxD,MAAOG,KAAM,WAAYH,KAAKI,YAIzD4B,EAASb,GAAI,SAAU,kCAAkC,WACxD,IAAMiC,EAAOvD,EAAGG,MAAOsD,QAAS,MAAOC,QAGjCE,EAAa5D,EAAGG,MAAOK,MAGvBqD,EAAcN,EAAKpC,KAAM,kCACzB2C,EAAcP,EAAKpC,KAAM,+BACzB4C,EAAeR,EAAKpC,KAAM,2BAGzB2C,EAAStD,OACfsD,EAAStD,IAAKoD,EAAWI,OAAQ,EAAG,GAAIC,eAIlCJ,EAAYrD,OAClBqD,EAAYrD,IAAKsD,EAAStD,OAIpBuD,EAAMvD,OACZuD,EAAMvD,IAAKsD,EAAStD,aAUvB,IAAM0D,EAAqBlE,EAAG,oCAAqCmE,MAAM,WACxE,IAAIA,EAAI,2CAAA9D,OAA+C+D,aAAaC,aAA5D,YASR,OAPA5F,EAAUiC,MAAM,SAAEc,GACjB,IAAM8C,EAAQF,aAAaG,YAAYzC,QAAS,KAAMN,EAASC,IAAK,gBACpE0C,GAAI,2CAAA9D,OAAgDiE,EAAhD,wBAAAjE,OAA8EmB,EAAS0B,GAAvF,yDAAA7C,OACuCmB,EAASC,IAAK,QADrD,MAAApB,OACoEmB,EAASC,IAAK,eADlF,6BAKE0C,KAGRzF,EAAkBgC,MAAM,SAAE8D,GACzB,IAAMC,EAAUD,EAAM/C,IAAK,YAGrBiD,EAAS1E,EAAG,IAAMyE,GACxB,GAAuB,IAAlBC,EAAOC,QAAkBD,EAAO9C,GAAI,mBAAzC,CAIA,IAMIgD,EANE/E,EAAS2E,EAAM/C,IAAK,UACpB3B,EAAS0E,EAAM/C,IAAK,SAE1BiD,EAAOG,SAAU,wBAIZH,EAAOxD,SAAU,kBAErB0D,EAAQF,EAAOjB,QAAS,oBAGxBiB,EAAOI,KAAM,sCACbF,EAAQF,EAAO3D,UAIhB,IAAMgE,EAAWb,EAAmBc,QAGpCN,EAAOtE,KAAM,gBAAiB2E,GAG9BA,EAAS3E,KAAM,sBAAuBjC,EAAG8G,kBAGzCF,EAAS3E,KAAM,sBAAuBsE,GAGtC,IAAMQ,EAAelF,EAAG,2BACxBkF,EAAa5E,KAAM,OAAQoE,EAAOpE,KAAM,SACxC4E,EAAa1E,IAAKkE,EAAOlE,OAGzB0E,EAAaC,SAAUP,GAGvBG,EAAS3E,KAAT,iBAAAC,OAAiClC,EAAG8G,kBAAqBC,GAGzD,IAAIE,GAAe,EACnB3G,EAAUiC,MAAM,SAAEc,GAEjB,GAAKrD,EAAG8G,mBAAqBzD,EAAS0B,GAAtC,CAKA,IAAMmC,EAAYxF,EAAQ2B,EAAS0B,KAAQ,KAGrCoC,EAAatF,EAAG,2BACtBsF,EAAWhF,KAAM,OAAjB,sBAAAD,OAAgDqE,EAAOpE,KAAM,QAA7D,MAAAD,OAA4EmB,EAAS0B,GAArF,MACAoC,EAAW9E,IAAK6E,GAGhBN,EAAS3E,KAAT,iBAAAC,OAAiCmB,EAAS0B,IAAOoC,GAGjDA,EAAWH,SAAUP,GAEhB,KAAOS,GAAa,OAASA,IACjCD,GAAe,OAKZA,GACJL,EAAS5D,KAAT,sBAAAd,OAAsClC,EAAG8G,iBAAzC,OAAiEJ,SAAU,cAI5ED,EAAM7B,OAAN,6CAAA1C,OAA4DmE,EAAMtB,GAAlE,cAAA7C,OAAmFP,EAAnF,SAGAiF,EAASI,SAAUP,OAGpB5E,EAAG,QAASsB,GAAI,QAAS,wBAAwB,WAEhD,IAAMiE,EAAWvF,EAAGG,MACd4E,EAAWQ,EAAQxE,SACnBS,EAAW+D,EAAQnF,KAAM,gBAAmBjC,EAAG8G,iBAGrDjF,EAAGG,MAAO0E,SAAU,cAAeW,WAAWC,YAAa,cAG3D,IAAMf,EAAaK,EAAS3E,KAAM,uBAC5BkF,EAAaP,EAAS3E,KAAT,iBAAAC,OAAiCmB,IAGpDkD,EAAO3C,QAAS,uBAGhBgD,EAAS3E,KAAM,sBAAuBoB,GAGtC,IAAMkE,EAAQJ,EAAW9E,MACnBN,EAAQoF,EAAWhF,KAAM,QAG/BoE,EAAOlE,IAAKkF,GAAQpF,KAAM,OAAQJ,GAGlCwE,EAAO3C,QAAS,0BAGjB/B,EAAG,QAASsB,GAAI,8CAA+C,yBAAyB,WAEvF,IAAMyD,EAAW/E,EAAGG,MAAOC,KAAM,iBAC3BoB,EAAWuD,EAAS3E,KAAM,uBAGb2E,EAAS3E,KAAT,iBAAAC,OAAiCmB,IAGzChB,IAAKL,KAAKuF,UAQtB,IAAMC,EAAWC,GAAGC,WAAaD,GAAGE,OAEpC,GAAwB,YAAnB,oBAAOC,QAAP,YAAAC,EAAOD,UAAuB,CAClCA,QAAQzE,GAAI,eAAe,SAAE2E,GAE5B,IAAMH,EAASG,EAAMH,QAAUG,EAEzBvB,EAAS1E,EAAG8F,EAAOI,cACxBnB,EAAWL,EAAOtE,KAAM,iBAElB2E,IAIPe,EAAOxE,GAAI,QAAQ,WAClBtB,EAAG8F,EAAOK,gBAAiBpF,SAASqF,MAAOrB,MAG5CL,EAAOpD,GAAI,uBAAuB,WAEjC,IAAM+E,EAAUV,EAASW,QAASR,EAAOS,cAEzC7B,EAAOlE,IAAK6F,MAGb3B,EAAOpD,GAAI,uBAAuB,WAEjC,IAAM+E,EAAUV,EAASa,MAAO9B,EAAOlE,OAEvCsF,EAAOW,WAAYJ,UAIrB,IAAMK,EAAgBX,QAAQY,OAAOC,UAAUC,KAC/Cd,QAAQY,OAAOC,UAAUC,KAAO,WAC/BH,EAAcI,MAAO3G,KAAM4G,WAE3B5G,KAAK6G,KAAM,gBACXhH,EAAGG,KAAK+F,cAAenE,QAAS,sBAoHlC,GA3GA/B,EAAG,sBAAuBC,QAAQ,WACjC,IAAMiD,EAAKlD,EAAGG,MAAOK,MACfyG,EAAUjH,EAAGG,MAAOsD,QAAS,2BAGnCwD,EAAQ9F,KAAM,2BAA4BH,YAAa,SAAiB,MAAPkC,GAGjE+D,EAAQ9F,KAAM,yBAA0Bc,OAGxCgF,EAAQ9F,KAAM,mBAAqB+B,GAAKzC,UACrCR,SAGJD,EAAG,uBAAwBY,OAAO,WACjC,IAAM8D,EAAwB1E,EAAGG,MAAOsD,QAAS,aAC3CyD,EAAwBxC,EAAOvD,KAAM,aACrCgG,EAAwBzC,EAAOvD,KAAM,0BACrCiG,EAAwBpH,EAAG,YAAaQ,MACxC6G,EAAwBrH,EAAG,gBAAiBQ,MAC5C8G,EAAwBJ,EAAOzD,QAAS,aAAcrD,KAAM,eAE/CzB,OAAOsC,KAAMmD,aAAamD,WAAa,IAAMvH,EAAEwH,MAAO,CACxEC,OAA0B,qBAC1BC,QAA0BN,EAC1BO,iBAA0BN,EAC1BO,wBAA0BN,IACtB,UAEMO,OAAS,WAAW,IACpB3E,EADoB4E,EACb3H,KAAK4H,SAASC,KAAKC,MAAO,cADb,GAAA,GAG9Bf,EAAO1G,IAAK0C,GACZwB,EAAOG,SAAU,sBACjBsC,EAAQ7G,KAAM,OAAQ,UAKxBN,EAAG,wBAAyBY,OAAO,WAClC,IAAM8D,EAAU1E,EAAGG,MAAOsD,QAAS,aAC7ByD,EAAUxC,EAAOvD,KAAM,yBACvBgG,EAAUzC,EAAOvD,KAAM,0BAE7BgG,EAAQ7G,KAAM,OAAQ4G,EAAO5G,KAAM,SACnC6G,EAAQlF,UAITjC,EAAG,wBAAyBY,OAAO,WAElC,IAGMsH,EAHSlI,EAAGG,MAAOsD,QAAS,aAGZtC,KAAM,aAAcX,MAG1C,GAAgB,QAAX0H,GAAoBC,SAAUD,EAAQ,KAAQ,EAElDE,MAAOhE,aAAaiE,oBAFrB,CAOA,IAAMC,EAAMtI,EAAGG,MAAOC,KAAM,OAAQ0B,QAAS,KAAMoG,GACnDvJ,OAAOsC,KAAMqH,OAIdtI,EAAG,wBAAyBY,OAAO,WAElC,GAAO2H,QAASnE,aAAaoE,0BAA7B,CAIA,IAAM9D,EAAa1E,EAAGG,MAAOsD,QAAS,aAChCyD,EAAaxC,EAAOvD,KAAM,yBAC1BsH,EAAa/D,EAAOvD,KAAM,yBAC1BiG,EAAapH,EAAG,YAAaQ,MAC7BkI,EAAaxB,EAAOzD,QAAS,aAAcrD,KAAM,eAEvDJ,EAAE2I,KAAM,CACPL,IAAOM,QACPC,KAAO,OACPzI,KAAO,CACNqH,OAAc,sBACdC,QAAcN,EACd0B,YAAcJ,GAEfK,QARO,WASN7B,EAAO1G,IAAK,MACZiI,EAAO9H,KAAMyD,aAAa4E,eAC1BtE,EAAOe,YAAa,uBAErBwD,MAbO,WAeNb,MAAOhE,aAAa8E,+BAUQ,YAA1B,oBAAOC,eAAP,YAAAnD,EAAOmD,iBAA8B,CACzC,IAAMC,EAAwBD,eAAeE,KAG7CF,eAAeE,KAAO,SAAUC,GAE/BF,EAAsBtC,MAAO3G,KAAM4G,WAGnC,IAAMK,EAAWkC,GAAQnB,SAAUhI,KAAKoJ,MAAOD,GAAQ,KAAU,EAG3DE,EAAWxJ,EAAC,SAAAK,OAAY+G,IACxBqC,EAAWzJ,EAAC,SAAAK,OAAY+G,IAGxBtH,EAAQ0J,EAASrI,KAAM,aAAcX,MAC3CiJ,EAAStI,KAAM,aAAcX,IAAKV,GAGlC,IAAM4J,EAAeF,EAASrI,KAAM,gBAAiBX,MACrDiJ,EAAStI,KAAM,sBAAuBX,IAAKkJ,GAAezJ,SAG1DwJ,EAAStI,KAAM,yBAA0BT,MAAM,WAC9C,IAAMwC,EAAKlD,EAAGG,MAAOC,KAAM,eACrBuJ,EAAcH,EAASrI,KAAT,mBAAAd,OAAmC6C,IAAQ1C,MAE/DR,EAAGG,MAAOgB,KAAM,UAAWX,IAAKmJ,GAAe","sourcesContent":["/* globals jQuery, Backbone, tinymce, ajaxurl, inlineEditPost, nlingualL10n */\n( () => {\n\tconst nL = window.nLingual = {};\n\n\t// =========================\n\t// ! Backbone Stuff\n\t// =========================\n\n\tconst Framework = nL.Framework = {};\n\n\t// Language model\n\tconst Language = Framework.Language = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tsystem_name : '',\n\t\t\tnative_name : '',\n\t\t\tshort_name  : '',\n\t\t\tiso_code    : '',\n\t\t\tslug        : '',\n\t\t\tlocale_name : '',\n\t\t\tdirection   : '',\n\t\t\tactive      : true,\n\t\t},\n\t} );\n\n\t// Languages collection\n\tconst LanguageSet = Framework.LanguageSet = Backbone.Collection.extend( {\n\t\tmodel: Language,\n\t} );\n\n\t// LocalizableField model\n\tconst LocalizableField = Framework.LocalizableField = Backbone.Model.extend( {\n\t\tidAttribute : 'field',\n\t\tdefaults    : {\n\t\t\tfield_id : '',\n\t\t\tvalues   : '',\n\t\t\tnonce    : '',\n\t\t},\n\t} );\n\n\t// LocalizableFieldSet collection\n\tconst LocalizableFieldSet = Framework.LocalizableFieldSet = Backbone.Collection.extend( {\n\t\tmodel: LocalizableField,\n\t} );\n\n\t// =========================\n\t// ! Setup Main Collections\n\t// =========================\n\n\tconst Languages = nL.Languages = new LanguageSet();\n\tconst LocalizableFields = nL.LocalizableFields = new LocalizableFieldSet();\n\n\t// =========================\n\t// ! jQuery Stuff\n\t// =========================\n\n\tjQuery( ( $ ) => {\n\t\t// =========================\n\t\t// ! Setings Pages\n\t\t// =========================\n\n\t\t// Check all fields of a matching name\n\t\t$( '.nl-checkall' ).change( function() {\n\t\t\tconst name = $( this ).data( 'name' );\n\t\t\t$( `input[name=\"${ name }[]\"]` ).attr( 'checked', this.checked );\n\t\t} );\n\t\t$( '.nl-matchall' ).change( function() {\n\t\t\tconst name = $( this ).data( 'name' );\n\t\t\t$( `[name=\"${ name }\"]` ).val( this.checked ? '*' : '' );\n\t\t} );\n\n\t\t// Hide all sections by default\n\t\t$( '.nl-section-content' ).hide();\n\n\t\t// Add toggle feature for sections\n\t\t$( '.nl-section-toggle' ).each( function() {\n\t\t\t$( this ).data( 'text', $( this ).text() );\n\t\t} ).click( function() {\n\t\t\tconst $toggle  = $( this );\n\t\t\tconst $section = $toggle.parent();\n\n\t\t\t$section.toggleClass( 'open' );\n\t\t\tconst open = $section.hasClass( 'open' );\n\n\t\t\t$section.find( '.nl-section-content' ).animate( { height: 'toggle' } );\n\n\t\t\t$toggle.text( $toggle.data( open ? 'alt' : 'text' ) );\n\t\t} );\n\n\t\t// Handle rendering of the previews\n\t\t$( '.nl-preview' ).on( 'nl:render', function() {\n\t\t\t// Get the default language slug, defaulting to \"en\"\n\t\t\tconst language = Languages.get( $( '#nlingual_default_language' ).val() );\n\n\t\t\tconst slug = ( language && language.get( 'slug' ) ) || 'en';\n\n\t\t\t// Get the query var, defaulting to \"nl_language\"\n\t\t\tconst qconst = $( '#nlingual_query_var' ).val() || 'nl_language';\n\n\t\t\t// Get the skip and override options\n\t\t\tconst skip = $( '#nlingual_skip_default_l10n' ).is( ':checked' );\n\t\t\tconst override = $( '#nlingual_post_language_override' ).is( ':checked' );\n\n\t\t\t// Get the format; some previews are dependent on options\n\t\t\tlet format;\n\t\t\tif ( $( this ).hasClass( 'nl-url-preview' ) ) {\n\t\t\t\tformat = $( this ).data( skip ? 'excluded' : 'included' );\n\t\t\t} else if ( $( this ).hasClass( 'nl-override-preview' ) ) {\n\t\t\t\tformat = $( this ).data( override ? 'on' : 'off' );\n\t\t\t} else {\n\t\t\t\tformat = $( this ).data( 'format' );\n\t\t\t}\n\n\t\t\t// Update the preview\n\t\t\t$( this ).text( format.replace( /%l/g, slug ).replace( /%v/g, qconst ) );\n\t\t} ).trigger( 'nl:render' );\n\n\t\t// Changing any of these will trigger re-rendering of the previews\n\t\t$( '#nlingual_default_language' ).change( function() {\n\t\t\t$( '.nl-preview' ).trigger( 'nl:render' );\n\t\t} );\n\t\t$( '#nlingual_skip_default_l10n' ).change( function() {\n\t\t\t$( '.nl-preview' ).trigger( 'nl:render' );\n\t\t} );\n\t\t$( '#nlingual_post_language_override' ).change( function() {\n\t\t\t$( '.nl-preview' ).trigger( 'nl:render' );\n\t\t} );\n\t\t$( '#nlingual_query_var' ).on( 'keyup change', function() {\n\t\t\t$( '.nl-preview' ).trigger( 'nl:render' );\n\t\t} );\n\n\t\t// Default to GET version of previews\n\t\t$( '.nl-preview' ).hide().filter( '.nl-redirect-get' ).show();\n\n\t\t// Changing the method will change which previews are shown\n\t\t$( 'input[name=\"nlingual_options[url_rewrite_method]\"]' ).change( function() {\n\t\t\tconst method = $( this ).val();\n\n\t\t\t// Ignore if it's not checked or somehow has no value\n\t\t\tif ( ! this.checked || ! method ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Show the associated preview while hiding the others\n\t\t\t$( '.nl-preview' ).hide().filter( `.nl-redirect-${ method }` ).show();\n\t\t} ).change();\n\n\t\t// =========================\n\t\t// ! Language Manager\n\t\t// =========================\n\n\t\t$( '#nlingual_languages' ).each( function() {\n\t\t\t// Elements\n\t\t\tconst $manager = $( this );\n\t\t\tconst $preset  = $( '#nl_language_preset' );\n\t\t\tconst $list    = $( '#nl_language_list' );\n\t\t\tconst $addBtn  = $( '#nl_language_add' );\n\n\t\t\tconst languageRowTemplate = $( '#nl_language_row' ).text();\n\t\t\tlet languageRowIndex = -1;\n\n\t\t\t// Setup sortability\n\t\t\t$list.sortable( {\n\t\t\t\titems       : 'tr',\n\t\t\t\tcontainment : 'parent',\n\t\t\t\thandle      : '.handle',\n\t\t\t} );\n\n\t\t\t// Load preset selector\n\t\t\tfor ( const preset in nL.presets ) {\n\t\t\t\t$preset.append( `<option value=\"${ preset }\">${ nL.presets[ preset ].system_name }</option>` );\n\t\t\t}\n\n\t\t\t// Row builder utility\n\t\t\tfunction buildLangRow( language ) {\n\t\t\t\tlet row = languageRowTemplate.replace( /%id%/g, language.id );\n\n\t\t\t\t// Loop through properties and replace\n\t\t\t\tfor ( const prop in language.attributes ) {\n\t\t\t\t\tconst regex = new RegExp( '%' + prop + '%', 'g' );\n\t\t\t\t\trow = row.replace( regex, language.get( prop ) );\n\t\t\t\t}\n\n\t\t\t\t// Parse the row into a new element\n\t\t\t\tconst $row = $( row );\n\n\t\t\t\t// Check correct direction checkbox\n\t\t\t\t$row.find( `.nl-language-direction input[value=\"${ language.get( 'direction' ) }\"]` ).attr( 'checked', true );\n\n\t\t\t\t// Check active checkbox if true\n\t\t\t\t$row.find( '.nl-language-active input' ).attr( 'checked', language.get( 'active' ) );\n\n\t\t\t\t// Add the row to the table\n\t\t\t\t$list.append( $row ).sortable( 'refresh' );\n\t\t\t}\n\n\t\t\t// Load table with current languages\n\t\t\tLanguages.each( buildLangRow );\n\n\t\t\t// Add button functionality\n\t\t\t$addBtn.click( function() {\n\t\t\t\tlet language;\n\n\t\t\t\t// Check if preset was selected,\n\t\t\t\t// otherwise make blank language\n\t\t\t\tif ( $preset.val() ) {\n\t\t\t\t\tconst preset = $preset.val();\n\t\t\t\t\tlanguage = new Language( nL.presets[ preset ] );\n\t\t\t\t\tlanguage.set( 'iso_code', preset );\n\n\t\t\t\t\t// Reset preset selector\n\t\t\t\t\t$preset.val( null );\n\t\t\t\t} else {\n\t\t\t\t\tlanguage = new Language();\n\t\t\t\t}\n\n\t\t\t\t// Default values\n\t\t\t\tlanguage.id = languageRowIndex;\n\t\t\t\tlanguage.set( 'slug', language.get( 'iso_code' ) );\n\t\t\t\tlanguage.set( 'active', true );\n\n\t\t\t\tbuildLangRow( language );\n\n\t\t\t\tlanguageRowIndex--;\n\t\t\t} );\n\n\t\t\t// Delete button functionality\n\t\t\t$manager.on( 'change', '.nl-language-delete input', function() {\n\t\t\t\tconst $row = $( this ).parents( 'tr' ).first(); // Get the parent row\n\n\t\t\t\t// Toggle delete class and inputs\n\t\t\t\t$row.toggleClass( 'todelete', this.checked );\n\t\t\t\t$row.find( 'input' ).not( this ).attr( 'disabled', this.checked );\n\t\t\t} );\n\n\t\t\t// Auto-fill locale_name, iso_code and slug\n\t\t\t$manager.on( 'change', '.nl-language-system_name input', function() {\n\t\t\t\tconst $row = $( this ).parents( 'tr' ).first(); // Get the parent row\n\n\t\t\t\t// Get the text\n\t\t\t\tconst systemName = $( this ).val();\n\n\t\t\t\t// Get the other fields\n\t\t\t\tconst $localeName = $row.find( '.nl-language-locale_name input' );\n\t\t\t\tconst $isoCode    = $row.find( '.nl-language-iso_code input' );\n\t\t\t\tconst $slug        = $row.find( '.nl-language-slug input' );\n\n\t\t\t\t// No ISO? Assume first 2 characters of system name\n\t\t\t\tif ( ! $isoCode.val() ) {\n\t\t\t\t\t$isoCode.val( systemName.substr( 0, 2 ).toLowerCase() );\n\t\t\t\t}\n\n\t\t\t\t// No locale? Assume same as ISO code\n\t\t\t\tif ( ! $localeName.val() ) {\n\t\t\t\t\t$localeName.val( $isoCode.val() );\n\t\t\t\t}\n\n\t\t\t\t// No slug? Assume same as ISO code\n\t\t\t\tif ( ! $slug.val() ) {\n\t\t\t\t\t$slug.val( $isoCode.val() );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\t// =========================\n\t\t// ! Input Localizer\n\t\t// =========================\n\n\t\t// Setup the base localizer\n\t\tconst $localizerTemplate = $( '<div class=\"nl-localizer\"></div>' ).html( function() {\n\t\t\tlet html = `<div class=\"nl-localizer-toggle\" title=\"${ nlingualL10n.LocalizeThis }\"></div>`;\n\n\t\t\tLanguages.each( ( language ) => {\n\t\t\t\tconst title = nlingualL10n.LocalizeFor.replace( '%s', language.get( 'system_name' ) );\n\t\t\t\thtml += `<div class=\"nl-localizer-option\" title=\"${ title }\" data-nl_language=\"${ language.id }\">\n\t\t\t\t\t<div class=\"nl-option-text\" data-slug=\"${ language.get( 'slug' ) }\">${ language.get( 'system_name' ) }</div>\n\t\t\t\t</div>`;\n\t\t\t} );\n\n\t\t\treturn html;\n\t\t} );\n\n\t\tLocalizableFields.each( ( field ) => {\n\t\t\tconst fieldId = field.get( 'field_id' );\n\n\t\t\t// Get the field if it exists and is an input/textarea\n\t\t\tconst $field = $( '#' + fieldId );\n\t\t\tif ( $field.length === 0 || ! $field.is( 'input, textarea' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst values = field.get( 'values' );\n\t\t\tconst nonce  = field.get( 'nonce' );\n\n\t\t\t$field.addClass( 'nl-localizable-input' );\n\n\t\t\t// Check if it's a tinymce editor field\n\t\t\tlet $wrap;\n\t\t\tif ( $field.hasClass( 'wp-editor-area' ) ) {\n\t\t\t\t// Use the editor wrapper as the container\n\t\t\t\t$wrap = $field.parents( '.wp-editor-wrap' );\n\t\t\t} else {\n\t\t\t\t// Wrap the field in a container\n\t\t\t\t$field.wrap( '<div class=\"nl-localizable\"></div>' );\n\t\t\t\t$wrap = $field.parent();\n\t\t\t}\n\n\t\t\t// Create the control\n\t\t\tconst $control = $localizerTemplate.clone();\n\n\t\t\t// Store the control reference in the field\n\t\t\t$field.data( '$nl_localizer', $control );\n\n\t\t\t// Store the current language of the control\n\t\t\t$control.data( 'nl_current_language', nL.default_language );\n\n\t\t\t// Store the field and wrapper reference in the control\n\t\t\t$control.data( '$nl_localizer_field', $field );\n\n\t\t\t// Create the storage input for the unlocalized field\n\t\t\tconst $unlocalized = $( '<input type=\"hidden\" />' );\n\t\t\t$unlocalized.attr( 'name', $field.attr( 'name' ) );\n\t\t\t$unlocalized.val( $field.val() );\n\n\t\t\t// Add to the wrapper\n\t\t\t$unlocalized.appendTo( $wrap );\n\n\t\t\t// Store the unlocalized input reference in the control\n\t\t\t$control.data( `$nl_localized_${ nL.default_language }`, $unlocalized );\n\n\t\t\t// Add hidden storage inputs\n\t\t\tlet hasLocalized = false;\n\t\t\tLanguages.each( ( language ) => {\n\t\t\t\t// Skip the default language\n\t\t\t\tif ( nL.default_language === language.id ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Get the localized version of the value\n\t\t\t\tconst localized = values[ language.id ] || null;\n\n\t\t\t\t// Create a hidden field for the input\n\t\t\t\tconst $localized = $( '<input type=\"hidden\" />' );\n\t\t\t\t$localized.attr( 'name', `nlingual_localized[${ $field.attr( 'name' ) }][${ language.id }]` );\n\t\t\t\t$localized.val( localized );\n\n\t\t\t\t// Store it for later use\n\t\t\t\t$control.data( `$nl_localized_${ language.id }`, $localized );\n\n\t\t\t\t// Add to the wrapper\n\t\t\t\t$localized.appendTo( $wrap );\n\n\t\t\t\tif ( '' !== localized && null !== localized ) {\n\t\t\t\t\thasLocalized = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Add the current class to the default language if localized versions are set\n\t\t\tif ( hasLocalized ) {\n\t\t\t\t$control.find( `[data-nl_language=\"${ nL.default_language }\"]` ).addClass( 'nl-current' );\n\t\t\t}\n\n\t\t\t// Add the nonce field\n\t\t\t$wrap.append( `<input type=\"hidden\" name=\"_nl_l10n_nonce[${ field.id }]\" value=\"${ nonce }\" />` );\n\n\t\t\t// Add the control at the end\n\t\t\t$control.appendTo( $wrap );\n\t\t} );\n\n\t\t$( 'body' ).on( 'click', '.nl-localizer-option', function() {\n\t\t\t// Get the localizer control, and the selected language\n\t\t\tconst $option  = $( this );\n\t\t\tconst $control = $option.parent();\n\t\t\tconst language = $option.data( 'nl_language' ) || nL.default_language;\n\n\t\t\t// Mark this as the new current one\n\t\t\t$( this ).addClass( 'nl-current' ).siblings().removeClass( 'nl-current' );\n\n\t\t\t// Get the current field and the localized storage field\n\t\t\tconst $field     = $control.data( '$nl_localizer_field' );\n\t\t\tconst $localized = $control.data( `$nl_localized_${ language }` );\n\n\t\t\t// Before we begin changing stuff, trigger an update on the field\n\t\t\t$field.trigger( 'nl:localizer:update' );\n\n\t\t\t// Update the controls current language\n\t\t\t$control.data( 'nl_current_language', language );\n\n\t\t\t// Get the value/name of the target localized field\n\t\t\tconst value = $localized.val();\n\t\t\tconst name  = $localized.attr( 'name' );\n\n\t\t\t// Swap the field's value/name\n\t\t\t$field.val( value ).attr( 'name', name );\n\n\t\t\t// Trigger a change event, for potential extensibility\n\t\t\t$field.trigger( 'nl:localizer:change' );\n\t\t} );\n\n\t\t$( 'body' ).on( 'input nl:localizer:update nl:localizer:save', '.nl-localizable-input', function() {\n\t\t\t// Get the control reference and it's current language\n\t\t\tconst $control = $( this ).data( '$nl_localizer' );\n\t\t\tconst language = $control.data( 'nl_current_language' );\n\n\t\t\t// Get the localized storage field\n\t\t\tconst $localized = $control.data( `$nl_localized_${ language }` );\n\n\t\t\t// Update it with the current value\n\t\t\t$localized.val( this.value );\n\t\t} );\n\n\t\t// =========================\n\t\t// ! - TinyMCE Extensions\n\t\t// =========================\n\n\t\t// Get the classic editor api\n\t\tconst wpEditor = wp.oldEditor || wp.editor;\n\n\t\tif ( typeof tinymce === 'object' ) {\n\t\t\ttinymce.on( 'SetupEditor', ( event ) => {\n\t\t\t\t// TinyMCE 4.7 changes callback arg to event CONTAINING editor\n\t\t\t\tconst editor = event.editor || event;\n\n\t\t\t\tconst $field = $( editor.getElement() ),\n\t\t\t\t\t$control = $field.data( '$nl_localizer' );\n\n\t\t\t\tif ( ! $control ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\teditor.on( 'init', () => {\n\t\t\t\t\t$( editor.getContainer() ).parent().after( $control );\n\t\t\t\t} );\n\n\t\t\t\t$field.on( 'nl:localizer:update', () => {\n\t\t\t\t\t// Get the content, clean it\n\t\t\t\t\tconst content = wpEditor.removep( editor.getContent() );\n\n\t\t\t\t\t$field.val( content );\n\t\t\t\t} );\n\n\t\t\t\t$field.on( 'nl:localizer:change', () => {\n\t\t\t\t\t// Get the value, process it\n\t\t\t\t\tconst content = wpEditor.autop( $field.val() );\n\n\t\t\t\t\teditor.setContent( content );\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tconst oldEditorSave = tinymce.Editor.prototype.save;\n\t\t\ttinymce.Editor.prototype.save = function() {\n\t\t\t\toldEditorSave.apply( this, arguments );\n\n\t\t\t\tthis.fire( 'SavedContent' );\n\t\t\t\t$( this.getElement() ).trigger( 'nl:localizer:save' );\n\t\t\t};\n\t\t}\n\n\t\t// =========================\n\t\t// ! Meta Box and Quick/Bulk Edit\n\t\t// =========================\n\n\t\t// Update visible translation fields based on current language\n\t\t$( '.nl-language-input' ).change( function() {\n\t\t\tconst id = $( this ).val();\n\t\t\tconst $parent = $( this ).parents( '.nl-translation-manager' );\n\n\t\t\t// Toggle visibility of the translations interface if language isn't set\n\t\t\t$parent.find( '.nl-manage-translations' ).toggleClass( 'hidden', id === '0' );\n\n\t\t\t// Show all translation fields by default\n\t\t\t$parent.find( '.nl-translation-field' ).show();\n\n\t\t\t// Hide the one for the current language\n\t\t\t$parent.find( '.nl-translation-' + id ).hide();\n\t\t} ).change(); // Update on page load\n\n\t\t// Create a new translation for the assocaited language\n\t\t$( '.nl-add-translation' ).click( function() {\n\t\t\tconst $field                = $( this ).parents( '.nl-field' );\n\t\t\tconst $input                = $field.find( '.nl-input' );\n\t\t\tconst $select               = $field.find( '.nl-translation-select' );\n\t\t\tconst postId                = $( '#post_ID' ).val();\n\t\t\tconst postLanguageId        = $( '#nl_language' ).val();\n\t\t\tconst translationLanguageId = $input.parents( '.nl-field' ).data( 'nl_language' );\n\n\t\t\tconst editWindow = window.open( nlingualL10n.admin_post + '?' + $.param( {\n\t\t\t\taction                  : 'nl_new_translation',\n\t\t\t\tpost_id                 : postId,\n\t\t\t\tpost_language_id        : postLanguageId,\n\t\t\t\ttranslation_language_id : translationLanguageId,\n\t\t\t} ), '_blank' );\n\n\t\t\teditWindow.onload = function() {\n\t\t\t\tconst [ , id ] = this.location.href.match( /post=(\\d+)/ );\n\n\t\t\t\t$input.val( id );\n\t\t\t\t$field.addClass( 'nl-has-translation' );\n\t\t\t\t$select.attr( 'name', null );\n\t\t\t};\n\t\t} );\n\n\t\t// Open a search field to find an existing translation\n\t\t$( '.nl-find-translation' ).click( function() {\n\t\t\tconst $field  = $( this ).parents( '.nl-field' );\n\t\t\tconst $input  = $field.find( '.nl-translation-input' );\n\t\t\tconst $select = $field.find( '.nl-translation-select' );\n\n\t\t\t$select.attr( 'name', $input.attr( 'name' ) );\n\t\t\t$select.show();\n\t\t} );\n\n\t\t// Open the editor for the selected translation\n\t\t$( '.nl-edit-translation' ).click( function() {\n\t\t\t// Get the parent field\n\t\t\tconst $field = $( this ).parents( '.nl-field' );\n\n\t\t\t// Get the selected value\n\t\t\tconst target = $field.find( '.nl-input' ).val();\n\n\t\t\t// Throw error if target isn't a valid post\n\t\t\tif ( target === 'new' || parseInt( target, 10 ) <= 0 ) {\n\t\t\t\t/* eslint-disable-next-line no-alert */\n\t\t\t\talert( nlingualL10n.NoPostSelected );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Build the edit URL and open in a new tab\n\t\t\tconst url = $( this ).data( 'url' ).replace( '%d', target );\n\t\t\twindow.open( url );\n\t\t} );\n\n\t\t// Unlink the target from the current post as a translation\n\t\t$( '.nl-drop-translation' ).click( function() {\n\t\t\t/* eslint-disable-next-line no-alert */\n\t\t\tif ( ! confirm( nlingualL10n.RemoveTranslationConfirm ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $field     = $( this ).parents( '.nl-field' );\n\t\t\tconst $input     = $field.find( '.nl-translation-input' );\n\t\t\tconst $title     = $field.find( '.nl-translation-title' );\n\t\t\tconst postId     = $( '#post_ID' ).val();\n\t\t\tconst languageId = $input.parents( '.nl-field' ).data( 'nl_language' );\n\n\t\t\t$.ajax( {\n\t\t\t\turl  : ajaxurl,\n\t\t\t\ttype : 'POST',\n\t\t\t\tdata : {\n\t\t\t\t\taction      : 'nl_drop_translation',\n\t\t\t\t\tpost_id     : postId,\n\t\t\t\t\tlanguage_id : languageId,\n\t\t\t\t},\n\t\t\t\tsuccess() {\n\t\t\t\t\t$input.val( null );\n\t\t\t\t\t$title.text( nlingualL10n.NoTranslation );\n\t\t\t\t\t$field.removeClass( 'nl-has-translation' );\n\t\t\t\t},\n\t\t\t\terror() {\n\t\t\t\t\t/* eslint-disable-next-line no-alert */\n\t\t\t\t\talert( nlingualL10n.RemoveTranslationError );\n\t\t\t\t},\n\t\t\t} );\n\t\t} );\n\n\t\t// =========================\n\t\t// ! WP API Extensions\n\t\t// =========================\n\n\t\t// Extend inlineEditPost if available\n\t\tif ( typeof inlineEditPost === 'object' ) {\n\t\t\tconst oldInlineEditPostEdit = inlineEditPost.edit;\n\n\t\t\t// Replace with new function\n\t\t\tinlineEditPost.edit = function( post ) {\n\t\t\t\t// Start by calling the original for default behaviour\n\t\t\t\toldInlineEditPostEdit.apply( this, arguments );\n\n\t\t\t\t// Get the post ID\n\t\t\t\tconst postId = ( post && parseInt( this.getId( post ), 10 ) ) || 0;\n\n\t\t\t\t// Get the post and edit rows\n\t\t\t\tconst $postRow = $( `#post-${ postId }` );\n\t\t\t\tconst $editRow = $( `#edit-${ postId }` );\n\n\t\t\t\t// Update the nonce field\n\t\t\t\tconst nonce = $postRow.find( '.nl-nonce' ).val();\n\t\t\t\t$editRow.find( '.nl-nonce' ).val( nonce );\n\n\t\t\t\t// Update the language field\n\t\t\t\tconst postLanguage = $postRow.find( '.nl-language' ).val();\n\t\t\t\t$editRow.find( '.nl-language-input' ).val( postLanguage ).change();\n\n\t\t\t\t// Update the translations fields\n\t\t\t\t$editRow.find( '.nl-translation-field' ).each( function() {\n\t\t\t\t\tconst id = $( this ).data( 'nl_language' );\n\t\t\t\t\tconst translation = $postRow.find( `.nl-translation-${ id }` ).val();\n\n\t\t\t\t\t$( this ).find( 'select' ).val( translation || 0 );\n\t\t\t\t} );\n\t\t\t};\n\t\t}\n\t} );\n} )();\n"]}