{"version":3,"sources":["admin.js"],"names":["nL","window","nLingual","Framework","Language","Backbone","Model","extend","defaults","system_name","native_name","short_name","iso_code","slug","locale_name","direction","active","LanguageSet","Collection","model","LocalizableField","idAttribute","field_id","values","nonce","LocalizableFieldSet","Languages","LocalizableFields","jQuery","$","change","name","this","data","concat","attr","checked","val","hide","each","text","click","$toggle","$section","parent","toggleClass","open","hasClass","find","animate","height","on","language","get","qvar","skip","override","format","replace","trigger","filter","show","method","buildLangRow","row","languageRowTemplate","id","prop","attributes","regex","RegExp","$row","$list","append","sortable","$manager","$preset","$addBtn","languageRowIndex","preset","items","containment","handle","presets","_preset","set","parents","first","not","$locale_name","$iso_code","$slug","substr","toLowerCase","$localizerTemplate","html","nlingualL10n","LocalizeThis","title","LocalizeFor","field","hasLocalized","$field","length","is","$wrap","addClass","wrap","$control","clone","default_language","$unlocalized","appendTo","localized","$localized","$option","siblings","removeClass","value","tinymce","_typeof","e","editor","getElement","getContainer","after","content","wp","removep","getContent","autop","setContent","oldEditorSave","Editor","prototype","save","apply","arguments","fire","$parent","$input","$select","post_id","post_language_id","translation_language_id","editWindow","admin_post","param","action","onload","_this$location$href$m","_this$location$href$m2","_slicedToArray","location","href","match","target","parseInt","alert","NoPostSelected","url","confirm","RemoveTranslationConfirm","$title","language_id","ajax","ajaxurl","type","success","NoTranslation","error","RemoveTranslationError","inlineEditPost","wpInlineEditPost_edit","edit","post","getId","$postRow","$editRow","post_language","translation","inlineEditTax","wpInlineEditTax_edit"],"mappings":"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","sourcesContent":["/* globals jQuery, alert, confirm, wp, Backbone, tinymce, ajaxurl, inlineEditPost, inlineEditTax, nlingualL10n */\n( () => {\n\tvar nL = window.nLingual = {};\n\n\t// =========================\n\t// ! Backbone Stuff\n\t// =========================\n\n\tvar Framework = nL.Framework = {};\n\n\t// Language model\n\tvar Language = Framework.Language = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tsystem_name : '',\n\t\t\tnative_name : '',\n\t\t\tshort_name  : '',\n\t\t\tiso_code    : '',\n\t\t\tslug        : '',\n\t\t\tlocale_name : '',\n\t\t\tdirection   : '',\n\t\t\tactive      : true,\n\t\t},\n\t} );\n\n\t// Languages collection\n\tvar LanguageSet = Framework.LanguageSet = Backbone.Collection.extend( {\n\t\tmodel: Language,\n\t} );\n\n\t// LocalizableField model\n\tvar LocalizableField = Framework.LocalizableField = Backbone.Model.extend( {\n\t\tidAttribute : 'field',\n\t\tdefaults    : {\n\t\t\tfield_id : '',\n\t\t\tvalues   : '',\n\t\t\tnonce    : '',\n\t\t},\n\t} );\n\n\t// LocalizableFieldSet collection\n\tvar LocalizableFieldSet = Framework.LocalizableFieldSet = Backbone.Collection.extend( {\n\t\tmodel: LocalizableField,\n\t} );\n\n\t// =========================\n\t// ! Setup Main Collections\n\t// =========================\n\n\tvar Languages = nL.Languages = new LanguageSet();\n\tvar LocalizableFields = nL.LocalizableFields = new LocalizableFieldSet();\n\n\t// =========================\n\t// ! jQuery Stuff\n\t// =========================\n\n\tjQuery( $ => {\n\t\t// =========================\n\t\t// ! Setings Pages\n\t\t// =========================\n\n\t\t// Check all fields of a matching name\n\t\t$( '.nl-checkall' ).change( function() {\n\t\t\tvar name = $( this ).data( 'name' );\n\t\t\t$( `input[name=\"${name}[]\"]` ).attr( 'checked', this.checked );\n\t\t} );\n\t\t$( '.nl-matchall' ).change( function() {\n\t\t\tvar name = $( this ).data( 'name' );\n\t\t\t$( `[name=\"${name}\"]` ).val( this.checked ? '*' : '' );\n\t\t} );\n\n\t\t// Hide all sections by default\n\t\t$( '.nl-section-content' ).hide();\n\n\t\t// Add toggle feature for sections\n\t\t$( '.nl-section-toggle' ).each( function() {\n\t\t\t$( this ).data( 'text', $( this ).text() );\n\t\t} ).click( function() {\n\t\t\tvar $toggle  = $( this );\n\t\t\tvar $section = $toggle.parent();\n\n\t\t\t$section.toggleClass( 'open' );\n\t\t\tvar open = $section.hasClass( 'open' );\n\n\t\t\t$section.find( '.nl-section-content' ).animate( { height: 'toggle' } );\n\n\t\t\t$toggle.text( $toggle.data( open ? 'alt' : 'text' ) );\n\t\t} );\n\n\t\t// Handle rendering of the previews\n\t\t$( '.nl-preview' ).on( 'nl:render', function() {\n\t\t\t// Get the default language slug, defaulting to \"en\"\n\t\t\tvar language = Languages.get( $( '#nlingual_default_language' ).val() );\n\n\t\t\tvar slug = language && language.get( 'slug' ) || 'en';\n\n\t\t\t// Get the query var, defaulting to \"nl_language\"\n\t\t\tvar qvar = $( '#nlingual_query_var' ).val() || 'nl_language';\n\n\t\t\t// Get the skip and override options\n\t\t\tvar skip = $( '#nlingual_skip_default_l10n' ).attr( 'checked' );\n\t\t\tvar override = $( '#nlingual_post_language_override' ).attr( 'checked' );\n\n\t\t\t// Get the format; some previews are dependent on options\n\t\t\tvar format;\n\t\t\tif ( $( this ).hasClass( 'nl-url-preview' ) ) {\n\t\t\t\tformat = $( this ).data( skip ? 'excluded' : 'included' );\n\t\t\t} else if ( $( this ).hasClass( 'nl-override-preview' ) ) {\n\t\t\t\tformat = $( this ).data( override ? 'on' : 'off' );\n\t\t\t} else {\n\t\t\t\tformat = $( this ).data( 'format' );\n\t\t\t}\n\n\t\t\t// Update the preview\n\t\t\t$( this ).text(\n\t\t\t\tformat\n\t\t\t\t.replace( /%l/g, slug )\n\t\t\t\t.replace( /%v/g, qvar )\n\t\t\t);\n\t\t} ).trigger( 'nl:render' );\n\n\t\t// Changing any of these will trigger re-rendering of the previews\n\t\t$( '#nlingual_default_language' ).change( function() {\n\t\t\t$( '.nl-preview' ).trigger( 'nl:render' );\n\t\t} );\n\t\t$( '#nlingual_skip_default_l10n' ).change( function() {\n\t\t\t$( '.nl-preview' ).trigger( 'nl:render' );\n\t\t} );\n\t\t$( '#nlingual_post_language_override' ).change( function() {\n\t\t\t$( '.nl-preview' ).trigger( 'nl:render' );\n\t\t} );\n\t\t$( '#nlingual_query_var' ).on( 'keyup change', function() {\n\t\t\t$( '.nl-preview' ).trigger( 'nl:render' );\n\t\t} );\n\n\t\t// Default to GET version of previews\n\t\t$( '.nl-preview' ).hide().filter( '.nl-redirect-get' ).show();\n\n\t\t// Changing the method will change which previews are shown\n\t\t$( 'input[name=\"nlingual_options[url_rewrite_method]\"]' ).change( function() {\n\t\t\tvar method = $( this ).val();\n\n\t\t\t// Ignore if it's not checked or somehow has no value\n\t\t\tif ( ! this.checked || ! method ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Show the associated preview while hiding the others\n\t\t\t$( '.nl-preview' ).hide().filter( `.nl-redirect-${method}` ).show();\n\t\t} ).change();\n\n\t\t// =========================\n\t\t// ! Language Manager\n\t\t// =========================\n\n\t\t$( '#nlingual_languages' ).each( function() {\n\t\t\t// Elements\n\t\t\tvar $manager = $( this );\n\t\t\tvar $preset  = $( '#nl_language_preset' );\n\t\t\tvar $list    = $( '#nl_language_list' );\n\t\t\tvar $addBtn  = $( '#nl_language_add' );\n\n\t\t\tvar languageRowTemplate = $( '#nl_language_row' ).text();\n\t\t\tvar languageRowIndex = -1;\n\n\t\t\t// Setup sortability\n\t\t\t$list.sortable( {\n\t\t\t\titems       : 'tr',\n\t\t\t\tcontainment : 'parent',\n\t\t\t\thandle      : '.handle',\n\t\t\t} );\n\n\t\t\t// Load preset selector\n\t\t\tfor ( const preset in nL.presets ) {\n\t\t\t\t$preset.append( `<option value=\"${preset}\">${nL.presets[ preset ].system_name}</option>` );\n\t\t\t}\n\n\t\t\t// Row builder utility\n\t\t\tfunction buildLangRow( language ) {\n\t\t\t\tvar row = languageRowTemplate.replace( /%id%/g, language.id );\n\n\t\t\t\t// Loop through properties and replace\n\t\t\t\tfor ( const prop in language.attributes ) {\n\t\t\t\t\tconst regex = new RegExp( '%' + prop + '%', 'g' );\n\t\t\t\t\trow = row.replace( regex, language.get( prop ) );\n\t\t\t\t}\n\n\t\t\t\t// Parse the row into a new element\n\t\t\t\tvar $row = $( row );\n\n\t\t\t\t// Check correct direction checkbox\n\t\t\t\t$row.find( `.nl-language-direction input[value=\"${language.get( 'direction' )}\"]` ).attr( 'checked', true );\n\n\t\t\t\t// Check active checkbox if true\n\t\t\t\t$row.find( '.nl-language-active input' ).attr( 'checked', language.get( 'active' ) );\n\n\t\t\t\t// Add the row to the table\n\t\t\t\t$list.append( $row ).sortable( 'refresh' );\n\t\t\t}\n\n\t\t\t// Load table with current languages\n\t\t\tLanguages.each( buildLangRow );\n\n\t\t\t// Add button functionality\n\t\t\t$addBtn.click( function() {\n\t\t\t\tvar language;\n\n\t\t\t\t// Check if preset was selected,\n\t\t\t\t// otherwise make blank language\n\t\t\t\tif ( $preset.val() ) {\n\t\t\t\t\tconst preset = $preset.val();\n\t\t\t\t\tlanguage = new Language( nL.presets[ preset ] );\n\t\t\t\t\tlanguage.set( 'iso_code', preset );\n\n\t\t\t\t\t// Reset preset selector\n\t\t\t\t\t$preset.val( null );\n\t\t\t\t} else {\n\t\t\t\t\tlanguage = new Language();\n\t\t\t\t}\n\n\t\t\t\t// Default values\n\t\t\t\tlanguage.id = languageRowIndex;\n\t\t\t\tlanguage.set( 'slug', language.get( 'iso_code' ) );\n\t\t\t\tlanguage.set( 'active', true );\n\n\t\t\t\tbuildLangRow( language );\n\n\t\t\t\tlanguageRowIndex--;\n\t\t\t} );\n\n\t\t\t// Delete button functionality\n\t\t\t$manager.on( 'change', '.nl-language-delete input', function() {\n\t\t\t\tvar $row = $( this ).parents( 'tr' ).first(); // Get the parent row\n\n\t\t\t\t// Toggle delete class and inputs\n\t\t\t\t$row.toggleClass( 'todelete', this.checked );\n\t\t\t\t$row.find( 'input' ).not( this ).attr( 'disabled', this.checked );\n\t\t\t} );\n\n\t\t\t// Auto-fill locale_name, iso_code and slug\n\t\t\t$manager.on( 'change', '.nl-language-system_name input', function() {\n\t\t\t\tvar $row = $( this ).parents( 'tr' ).first(); // Get the parent row\n\n\t\t\t\t// Get the text\n\t\t\t\tvar system_name = $( this ).val();\n\n\t\t\t\t// Get the other fields\n\t\t\t\tvar $locale_name = $row.find( '.nl-language-locale_name input' );\n\t\t\t\tvar $iso_code    = $row.find( '.nl-language-iso_code input' );\n\t\t\t\tvar $slug        = $row.find( '.nl-language-slug input' );\n\n\t\t\t\t// No ISO? Assume first 2 characters of system name\n\t\t\t\tif ( ! $iso_code.val() ) {\n\t\t\t\t\t$iso_code.val( system_name.substr( 0, 2 ).toLowerCase() );\n\t\t\t\t}\n\n\t\t\t\t// No locale? Assume same as ISO code\n\t\t\t\tif ( ! $locale_name.val() ) {\n\t\t\t\t\t$locale_name.val( $iso_code.val() );\n\t\t\t\t}\n\n\t\t\t\t// No slug? Assume same as ISO code\n\t\t\t\tif ( ! $slug.val() ) {\n\t\t\t\t\t$slug.val( $iso_code.val() );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\t// =========================\n\t\t// ! Input Localizer\n\t\t// =========================\n\n\t\t// Setup the base localizer\n\t\tvar $localizerTemplate = $( '<div class=\"nl-localizer\"></div>' ).html( function() {\n\t\t\tvar html = `<div class=\"nl-localizer-toggle\" title=\"${nlingualL10n.LocalizeThis}\"></div>`;\n\n\t\t\tLanguages.each( language => {\n\t\t\t\tvar title = nlingualL10n.LocalizeFor.replace( '%s', language.get( 'system_name' ) );\n\t\t\t\thtml += `<div class=\"nl-localizer-option\" title=\"${title}\" data-nl_language=\"${language.id}\">\n\t\t\t\t\t<div class=\"nl-option-text\" data-slug=\"${language.get( 'slug' )}\">${language.get( 'system_name' )}</div>\n\t\t\t\t</div>`;\n\t\t\t} );\n\n\t\t\treturn html;\n\t\t} );\n\n\t\tLocalizableFields.each( field => {\n\t\t\tvar field_id = field.get( 'field_id' );\n\t\t\tvar values   = field.get( 'values' );\n\t\t\tvar nonce    = field.get( 'nonce' );\n\n\t\t\tvar hasLocalized = false;\n\n\t\t\t// Get the field if it exists and is an input/textarea\n\t\t\tvar $field = $( '#' + field_id );\n\t\t\tif ( $field.length === 0 || ! $field.is( 'input, textarea' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$field.addClass( 'nl-localizable-input' );\n\n\t\t\t// Check if it's a tinymce editor field\n\t\t\tvar $wrap;\n\t\t\tif ( $field.hasClass( 'wp-editor-area' ) ) {\n\t\t\t\t// Use the editor wrapper as the container\n\t\t\t\t$wrap = $field.parents( '.wp-editor-wrap' );\n\t\t\t} else {\n\t\t\t\t// Wrap the field in a container\n\t\t\t\t$field.wrap( '<div class=\"nl-localizable\"></div>' );\n\t\t\t\t$wrap = $field.parent();\n\t\t\t}\n\n\t\t\t// Create the control\n\t\t\tvar $control = $localizerTemplate.clone();\n\n\t\t\t// Store the control reference in the field\n\t\t\t$field.data( '$nl_localizer', $control );\n\n\t\t\t// Store the current language of the control\n\t\t\t$control.data( 'nl_current_language', nL.default_language );\n\n\t\t\t// Store the field and wrapper reference in the control\n\t\t\t$control.data( '$nl_localizer_field', $field );\n\n\t\t\t// Create the storage input for the unlocalized field\n\t\t\tvar $unlocalized = $( '<input type=\"hidden\" />' );\n\t\t\t$unlocalized.attr( 'name', $field.attr( 'name' ) );\n\t\t\t$unlocalized.val( $field.val() );\n\n\t\t\t// Add to the wrapper\n\t\t\t$unlocalized.appendTo( $wrap );\n\n\t\t\t// Store the unlocalized input reference in the control\n\t\t\t$control.data( `$nl_localized_${nL.default_language}`, $unlocalized );\n\n\t\t\t// Add hidden storage inputs\n\t\t\tvar hasLocalized;\n\t\t\tLanguages.each( language => {\n\t\t\t\t// Skip the default language\n\t\t\t\tif ( nL.default_language === language.id ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Get the localized version of the value\n\t\t\t\tvar localized = values[ language.id ] || null;\n\n\t\t\t\t// Create a hidden field for the input\n\t\t\t\tvar $localized = $( '<input type=\"hidden\" />' );\n\t\t\t\t$localized.attr( 'name', `nlingual_localized[${$field.attr( 'name' )}][${language.id}]` );\n\t\t\t\t$localized.val( localized );\n\n\t\t\t\t// Store it for later use\n\t\t\t\t$control.data( `$nl_localized_${language.id}`, $localized );\n\n\t\t\t\t// Add to the wrapper\n\t\t\t\t$localized.appendTo( $wrap );\n\n\t\t\t\tif ( '' !== localized && null !== localized ) {\n\t\t\t\t\thasLocalized = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Add the current class to the default language if localized versions are set\n\t\t\tif ( hasLocalized ) {\n\t\t\t\t$control.find( `[data-nl_language=\"${nL.default_language}\"]` ).addClass( 'nl-current' );\n\t\t\t}\n\n\t\t\t// Add the nonce field\n\t\t\t$wrap.append( `<input type=\"hidden\" name=\"_nl_l10n_nonce[${field.id}]\" value=\"${nonce}\" />` );\n\n\t\t\t// Add the control at the end\n\t\t\t$control.appendTo( $wrap );\n\t\t} );\n\n\t\t$( 'body' ).on( 'click', '.nl-localizer-option', function() {\n\t\t\t// Get the localizer control, and the selected language\n\t\t\tvar $option  = $( this );\n\t\t\tvar $control = $option.parent();\n\t\t\tvar language = $option.data( 'nl_language' ) || nL.default_language;\n\n\t\t\t// Mark this as the new current one\n\t\t\t$( this ).addClass( 'nl-current' ).siblings().removeClass( 'nl-current' );\n\n\t\t\t// Get the current field and the localized storage field\n\t\t\tvar $field     = $control.data( '$nl_localizer_field' );\n\t\t\tvar $localized = $control.data( `$nl_localized_${language}` );\n\n\t\t\t// Before we begin changing stuff, trigger an update on the field\n\t\t\t$field.trigger( 'nl:localizer:update' );\n\n\t\t\t// Update the controls current language\n\t\t\t$control.data( 'nl_current_language', language );\n\n\t\t\t// Get the value/name of the target localized field\n\t\t\tvar value = $localized.val();\n\t\t\tvar name  = $localized.attr( 'name' );\n\n\t\t\t// Swap the field's value/name\n\t\t\t$field.val( value ).attr( 'name', name );\n\n\t\t\t// Trigger a change event, for potential extensibility\n\t\t\t$field.trigger( 'nl:localizer:change' );\n\t\t} );\n\n\t\t$( 'body' ).on( 'input nl:localizer:update nl:localizer:save', '.nl-localizable-input', function() {\n\t\t\t// Get the control reference and it's current language\n\t\t\tvar $control = $( this ).data( '$nl_localizer' );\n\t\t\tvar language = $control.data( 'nl_current_language' );\n\n\t\t\t// Get the localized storage field\n\t\t\tvar $localized = $control.data( `$nl_localized_${language}` );\n\n\t\t\t// Update it with the current value\n\t\t\t$localized.val( this.value );\n\t\t} );\n\n\t\t// =========================\n\t\t// ! - TinyMCE Extensions\n\t\t// =========================\n\n\t\tif ( typeof tinymce === 'object' ) {\n\t\t\ttinymce.on( 'SetupEditor', e => {\n\t\t\t\t// TinyMCE 4.7 changes callback arg to event CONTAINING editor\n\t\t\t\tvar editor = e.editor || e;\n\n\t\t\t\tvar $field = $( editor.getElement() ),\n\t\t\t\t\t$control = $field.data( '$nl_localizer' );\n\n\t\t\t\tif ( ! $control ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\teditor.on( 'init', () => {\n\t\t\t\t\t$( editor.getContainer() ).parent().after( $control );\n\t\t\t\t} );\n\n\t\t\t\t$field.on( 'nl:localizer:update', () => {\n\t\t\t\t\t// Get the content, clean it\n\t\t\t\t\tvar content = wp.editor.removep( editor.getContent() );\n\n\t\t\t\t\t$field.val( content );\n\t\t\t\t} );\n\n\t\t\t\t$field.on( 'nl:localizer:change', () => {\n\t\t\t\t\t// Get the value, process it\n\t\t\t\t\tvar content = wp.editor.autop( $field.val() );\n\n\t\t\t\t\teditor.setContent( content );\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tvar oldEditorSave = tinymce.Editor.prototype.save;\n\t\t\ttinymce.Editor.prototype.save = function() {\n\t\t\t\toldEditorSave.apply( this, arguments );\n\n\t\t\t\tthis.fire( 'SavedContent' );\n\t\t\t\t$( this.getElement() ).trigger( 'nl:localizer:save' );\n\t\t\t};\n\t\t}\n\n\t\t// =========================\n\t\t// ! Meta Box and Quick/Bulk Edit\n\t\t// =========================\n\n\t\t// Update visible translation fields based on current language\n\t\t$( '.nl-language-input' ).change( function() {\n\t\t\tvar id = $( this ).val();\n\t\t\tvar $parent = $( this ).parents( '.nl-translation-manager' );\n\n\t\t\t// Toggle visibility of the translations interface if language isn't set\n\t\t\t$parent.find( '.nl-manage-translations' ).toggleClass( 'hidden', id === '0' );\n\n\t\t\t// Show all translation fields by default\n\t\t\t$parent.find( '.nl-translation-field' ).show();\n\n\t\t\t// Hide the one for the current language\n\t\t\t$parent.find( '.nl-translation-' + id ).hide();\n\t\t} ).change(); // Update on page load\n\n\t\t// Create a new translation for the assocaited language\n\t\t$( '.nl-add-translation' ).click( function() {\n\t\t\tvar $field                  = $( this ).parents( '.nl-field' );\n\t\t\tvar $input                  = $field.find( '.nl-input' );\n\t\t\tvar $select                   = $field.find( '.nl-translation-select' );\n\t\t\tvar post_id                 = $( '#post_ID' ).val();\n\t\t\tvar post_language_id        = $( '#nl_language' ).val();\n\t\t\tvar translation_language_id = $input.parents( '.nl-field' ).data( 'nl_language' );\n\n\t\t\tvar editWindow = window.open( nlingualL10n.admin_post + '?' + $.param( {\n\t\t\t\taction: 'nl_new_translation',\n\t\t\t\tpost_id,\n\t\t\t\tpost_language_id,\n\t\t\t\ttranslation_language_id,\n\t\t\t} ), '_blank' );\n\n\t\t\teditWindow.onload = function() {\n\t\t\t\tvar [ , id ] = this.location.href.match( /post=(\\d+)/ );\n\n\t\t\t\t$input.val( id );\n\t\t\t\t$field.addClass( 'nl-has-translation' );\n\t\t\t\t$select.attr( 'name', null );\n\t\t\t};\n\t\t} );\n\n\t\t// Open a search field to find an existing translation\n\t\t$( '.nl-find-translation' ).click( function() {\n\t\t\tvar $field  = $( this ).parents( '.nl-field' );\n\t\t\tvar $input  = $field.find( '.nl-translation-input' );\n\t\t\tvar $select = $field.find( '.nl-translation-select' );\n\n\t\t\t$select.attr( 'name', $input.attr( 'name' ) );\n\t\t\t$select.show();\n\t\t} );\n\n\t\t// Open the editor for the selected translation\n\t\t$( '.nl-edit-translation' ).click( function() {\n\t\t\t// Get the parent field\n\t\t\tvar $field = $( this ).parents( '.nl-field' );\n\n\t\t\t// Get the selected value\n\t\t\tvar target = $field.find( '.nl-input' ).val();\n\n\t\t\t// Throw error if target isn't a valid post\n\t\t\tif ( target === 'new' || parseInt( target, 10 ) <= 0 ) {\n\t\t\t\talert( nlingualL10n.NoPostSelected );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Build the edit URL and open in a new tab\n\t\t\tvar url = $( this ).data( 'url' ).replace( '%d', target );\n\t\t\twindow.open( url );\n\t\t} );\n\n\t\t// Unlink the target from the current post as a translation\n\t\t$( '.nl-drop-translation' ).click( function() {\n\t\t\tif ( ! confirm( nlingualL10n.RemoveTranslationConfirm ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar $field      = $( this ).parents( '.nl-field' );\n\t\t\tvar $input      = $field.find( '.nl-translation-input' );\n\t\t\tvar $title      = $field.find( '.nl-translation-title' );\n\t\t\tvar post_id     = $( '#post_ID' ).val();\n\t\t\tvar language_id = $input.parents( '.nl-field' ).data( 'nl_language' );\n\n\t\t\t$.ajax( {\n\t\t\t\turl  : ajaxurl,\n\t\t\t\ttype : 'POST',\n\t\t\t\tdata : {\n\t\t\t\t\taction: 'nl_drop_translation',\n\t\t\t\t\tpost_id,\n\t\t\t\t\tlanguage_id,\n\t\t\t\t},\n\t\t\t\tsuccess() {\n\t\t\t\t\t$input.val( null );\n\t\t\t\t\t$title.text( nlingualL10n.NoTranslation );\n\t\t\t\t\t$field.removeClass( 'nl-has-translation' );\n\t\t\t\t},\n\t\t\t\terror() {\n\t\t\t\t\talert( nlingualL10n.RemoveTranslationError );\n\t\t\t\t},\n\t\t\t} );\n\t\t} );\n\n\t\t// =========================\n\t\t// ! WP API Extensions\n\t\t// =========================\n\n\t\t// Extend inlineEditPost if available\n\t\tif ( typeof inlineEditPost === 'object' ) {\n\t\t\tconst wpInlineEditPost_edit = inlineEditPost.edit;\n\n\t\t\t// Replace with new function\n\t\t\tinlineEditPost.edit = function( post ) {\n\t\t\t\t// Start by calling the original for default behaviour\n\t\t\t\twpInlineEditPost_edit.apply( this, arguments );\n\n\t\t\t\t// Get the post ID\n\t\t\t\tvar post_id = post && parseInt( this.getId( post ), 10 ) || 0;\n\n\t\t\t\t// Get the post and edit rows\n\t\t\t\tvar $postRow = $( `#post-${post_id}` );\n\t\t\t\tvar $editRow = $( `#edit-${post_id}` );\n\n\t\t\t\t// Update the nonce field\n\t\t\t\tvar nonce = $postRow.find( '.nl-nonce' ).val();\n\t\t\t\t$editRow.find( '.nl-nonce' ).val( nonce );\n\n\t\t\t\t// Update the language field\n\t\t\t\tvar post_language = $postRow.find( '.nl-language' ).val();\n\t\t\t\t$editRow.find( '.nl-language-input' ).val( post_language ).change();\n\n\t\t\t\t// Update the translations fields\n\t\t\t\t$editRow.find( '.nl-translation-field' ).each( function() {\n\t\t\t\t\tvar id = $( this ).data( 'nl_language' );\n\t\t\t\t\tvar translation = $postRow.find( `.nl-translation-${id}` ).val();\n\n\t\t\t\t\t$( this ).find( 'select' ).val( translation || 0 );\n\t\t\t\t} );\n\t\t\t};\n\t\t}\n\n\t\t// Extend inlineEditTax if available\n\t\tif ( typeof inlineEditTax === 'object' ) {\n\t\t\tconst wpInlineEditTax_edit = inlineEditTax.edit;\n\n\t\t\t// Replace with new function\n\t\t\tinlineEditTax.edit = function( /* id */ ) {\n\n\t\t\t\t// Start by calling the original for default behaviour\n\t\t\t\twpInlineEditTax_edit.apply( this, arguments );\n\t\t\t};\n\t\t}\n\t} );\n} )();\n"]}